{"version":3,"sources":["components/OutputerBlock.jsx","redux/actions/actions.js","components/SetterBlock.jsx","App.js","reportWebVitals.js","redux/reducers/count-reducer.js","redux/store.js","index.js"],"names":["OutputerBlock","dispatch","useDispatch","useSelector","countReducer","numsLoaded","minNum","maxNum","resetActivate","minNumValue","className","onClick","type","payload","disabled","reseterAC","SetterBlock","console","log","maxInputRef","React","createRef","minInputRef","useState","maxInputValue","setMaxInputValue","minInputValue","setMinInputValue","result","htmlFor","ref","onChange","Number","current","value","changeValuesMaxAC","name","changeValuesLessAC","starterAC","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","state","action","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d807a8ef.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {incrementAC, reseterAC} from '../redux/actions/actions'\r\n\r\nfunction OutputerBlock() {\r\n    const dispatch = useDispatch();\r\n\r\n    const {numsLoaded, minNum, maxNum, resetActivate, minNumValue} = useSelector(({countReducer}) => countReducer);\r\n\r\n    const onStartBtnClick = () => {\r\n        dispatch(incrementAC(minNum + 1))\r\n    }\r\n\r\n    const resetCounter = () => {\r\n        dispatch(reseterAC(minNumValue));\r\n    }\r\n\r\n    return (\r\n        <div className=\"counter__block\">\r\n            <div className=\"counter__setter-block\">\r\n            <span className={`output ${minNum === maxNum ? 'equals' : ''}`}>{numsLoaded ? minNum : 0}</span>\r\n            </div>  \r\n            <div className=\"counter__setter-btn\">\r\n                <button onClick={onStartBtnClick} className=\"btn btn--set\" disabled={minNum === maxNum ? true : false}>Start</button>\r\n                <button onClick={resetCounter} className=\"btn btn--set\" disabled={resetActivate}>Reset</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OutputerBlock\r\n","const SET_COUNT = 'SET_COUNT'\r\nconst INCREMENT = 'INCREMENT'\r\nconst RESET_COUNTER = 'RESET_COUNTER'\r\nconst CHANGE_MAX_VALUES = 'CHANGE_MAX_VALUES'\r\nconst CHANGE_MIN_VALUES = 'CHANGE_MIN_VALUES'\r\n\r\nexport const starterAC = (minNum, maxNum) => {\r\n    return {\r\n        type: SET_COUNT,\r\n        payload: [minNum, maxNum] \r\n    }\r\n}\r\n\r\nexport const incrementAC = (num) => {\r\n    return {\r\n        type: INCREMENT,\r\n        payload: num\r\n    }\r\n}\r\n\r\nexport const reseterAC = (minNum) => {\r\n    return {\r\n        type: RESET_COUNTER,\r\n        payload: minNum,\r\n    }\r\n}\r\n\r\nexport const changeValuesMaxAC = (maxNum) => {\r\n    return {\r\n        type: CHANGE_MAX_VALUES,\r\n        payload: maxNum\r\n    }\r\n}\r\n\r\nexport const changeValuesLessAC = (minNum) => {\r\n    return {\r\n        type: CHANGE_MIN_VALUES,\r\n        payload: minNum\r\n    }\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {starterAC, changeValuesMaxAC, changeValuesLessAC } from '../redux/actions/actions'\r\n\r\nfunction SetterBlock() {\r\n    const dispatch = useDispatch();\r\n\r\n    const {minNum, maxNum, numsLoaded} = useSelector(({countReducer}) => countReducer);\r\n\r\n    console.log(minNum, maxNum, numsLoaded);\r\n\r\n    const maxInputRef = React.createRef();\r\n    const minInputRef = React.createRef();\r\n\r\n    const [maxInputValue, setMaxInputValue] = React.useState(10)\r\n    const [minInputValue, setMinInputValue] = React.useState(1)\r\n\r\n    \r\n    const result = minInputValue >= maxInputValue || minInputValue < 0 || maxInputValue < 0\r\n    \r\n\r\n    const onMaxInputChange = () => {\r\n        const maxNum = Number(maxInputRef.current.value)\r\n        setMaxInputValue(maxNum);\r\n        dispatch(changeValuesMaxAC(maxNum));\r\n    }\r\n    const onMinInputChange = () => {\r\n        const minNum = Number(minInputRef.current.value)\r\n        setMinInputValue(minNum);\r\n        dispatch(changeValuesLessAC(minNum));\r\n    }\r\n    \r\n    const handleSetNums = () => {\r\n        dispatch(starterAC(minInputValue, maxInputValue))\r\n    }\r\n\r\n    return (\r\n        <div className=\"counter__block\">\r\n            <div className=\"counter__setter-block\">\r\n                <div className=\"counter__inputs\">\r\n                    <div className=\"counter__input\">\r\n                        <label htmlFor=\"maxInput\">max value:</label>\r\n                        <input className={result ? 'error' : ''} ref={maxInputRef} onChange={onMaxInputChange} type=\"number\" name=\"maxInput\" value={maxInputValue}/>\r\n                    </div>\r\n                    <div className=\"counter__input\">\r\n                        <label htmlFor=\"minInput\">min value:</label>\r\n                        <input className={result ? 'error' : ''} ref={minInputRef} onChange={onMinInputChange} type=\"number\" name=\"minInput\" value={minInputValue}/>\r\n                    </div>\r\n                </div>\r\n            </div>  \r\n            <div className=\"counter__setter-btn\">\r\n                <button disabled={numsLoaded \r\n                || result\r\n                ? true : false} onClick={handleSetNums} className=\"btn btn--set\">Set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetterBlock\r\n","import React from 'react';\nimport './App.css';\nimport OutputerBlock from './components/OutputerBlock';\nimport SetterBlock from './components/SetterBlock';\n\nconst App = () => {\n    \n  return (\n      <div className=\"wrap\">\n            <SetterBlock  />\n            <OutputerBlock />\n        {/* <div className=\"counter__block\">\n            <div className=\"counter__setter-block\">\n                <div className=\"counter__inputs\">\n                    <div className=\"counter__input\">\n                        <label htmlFor=\"maxInput\">max value:</label>\n                        <input className={ \n                  minInputValue >= maxInputValue \n                  || minInputValue < 0 \n                  || maxInputValue < 0\n                  ? 'error' : ''} ref={maxInputRef} onChange={onMaxInputChange} type=\"number\" name=\"maxInput\" value={maxInputValue}/>\n                    </div>\n                    <div className=\"counter__input\">\n                        <label htmlFor=\"minInput\">min value:</label>\n                        <input className={ \n                  minInputValue >= maxInputValue \n                  || minInputValue < 0 \n                  || maxInputValue < 0\n                  ? 'error' : ''} ref={minInputRef} onChange={onMinInputChange} type=\"number\" name=\"minInput\" value={minInputValue}/>\n                    </div>\n                </div>\n            </div>  \n            <div className=\"counter__setter-btn\">\n                <button onClick={() => setNums(minInputValue, maxInputValue)} \n                className=\"btn btn--set\"\n                disabled={numsLoaded \n                || minInputValue >= maxInputValue \n                || minInputValue < 0 \n                || maxInputValue < 0\n                ? true : false}>Set</button>\n            </div>\n        </div> */}\n        {/* <div className=\"counter__block\">\n            <div className=\"counter__setter-block\">\n            <span className={`output ${minNum === maxNum && numsLoaded ? 'equals' : ''}`}>\n                {minInputValue >= maxInputValue \n                  || minInputValue < 0 \n                  || maxInputValue < 0\n                  ? <b className='error-text'>Incorrect values</b> \n                  : numsLoaded \n                  ? minNum \n                  : 'Enter values and press \"Set\"'}\n            </span>\n            </div>  \n            <div className=\"counter__setter-btn\">\n                <button onClick={() => onStartBtnClick(minNum)} \n                  className=\"btn btn--set\" \n                  disabled={minNum === maxNum || !numsLoaded ? true : false}>Start</button>\n                <button onClick={() => resetCounter(minInputValue)} \n                  className=\"btn btn--set\" \n                  disabled={resetActivate}>Reset</button>\n            </div>\n        </div> */}\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    numsLoaded: false,\r\n    minNumValue: 0,\r\n    minNum: 0,\r\n    maxNum: 10,\r\n    resetActivate: true\r\n}\r\n\r\nconst countReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'SET_COUNT':\r\n            return {\r\n                ...state,\r\n                minNumValue: action.payload[0],\r\n                minNum: action.payload[0],\r\n                maxNum: action.payload[1],\r\n                numsLoaded: true\r\n            }\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state,\r\n                minNum: action.payload,\r\n                resetActivate: false\r\n            }\r\n        case 'RESET_COUNTER':\r\n            return {\r\n                ...state,\r\n                minNum: action.payload,\r\n                resetActivate: true\r\n            }\r\n        case 'CHANGE_MAX_VALUES':\r\n            return {\r\n                ...state,\r\n                maxNum: action.payload,\r\n                numsLoaded: false\r\n            }\r\n        \r\n        case 'CHANGE_MIN_VALUES':\r\n            return {\r\n                ...state,\r\n                minNum: action.payload,\r\n                numsLoaded: false\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default countReducer;","import { createStore, combineReducers } from 'redux';\r\nimport countReducer from './reducers/count-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    countReducer\r\n})\r\n\r\nconst store = createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}