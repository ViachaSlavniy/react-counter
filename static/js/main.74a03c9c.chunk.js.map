{"version":3,"sources":["redux/actions/actions.js","components/SetterBlock.jsx","App.js","reportWebVitals.js","redux/reducers/count-reducer.js","redux/store.js","index.js"],"names":["starterAC","numsArr","type","payload","incrementAC","num","reseterAC","minNum","SetterBlock","App","dispatch","useDispatch","maxInputRef","React","createRef","minInputRef","useState","maxInputValue","setMaxInputValue","minInputValue","setMinInputValue","useSelector","countReducer","numsLoaded","maxNum","resetActivate","className","htmlFor","ref","onChange","Number","current","value","name","onClick","setNums","disabled","onStartBtnClick","resetCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","state","action","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74a03c9c.chunk.js","sourcesContent":["const SET_COUNT = 'SET_COUNT'\r\nconst INCREMENT = 'INCREMENT'\r\nconst RESET_COUNTER = 'RESET_COUNTER'\r\nconst CHANGE_VALUES = 'CHANGE_VALUES'\r\n\r\nexport const starterAC = (numsArr) => {\r\n    return {\r\n        type: SET_COUNT,\r\n        payload: numsArr \r\n    }\r\n}\r\n\r\nexport const incrementAC = (num) => {\r\n    return {\r\n        type: INCREMENT,\r\n        payload: num\r\n    }\r\n}\r\n\r\nexport const reseterAC = (minNum) => {\r\n    return {\r\n        type: RESET_COUNTER,\r\n        payload: minNum,\r\n    }\r\n}\r\n\r\nexport const changeValuesAC = () => {\r\n    return {\r\n        type: CHANGE_VALUES\r\n    }\r\n}","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport {starterAC} from '../redux/actions/actions'\r\n\r\nfunction SetterBlock() {\r\n    const dispatch = useDispatch();\r\n\r\n    const maxInputRef = React.createRef();\r\n    const minInputRef = React.createRef();\r\n\r\n    const [maxInputValue, setMaxInputValue] = React.useState(10)\r\n    const [minInputValue, setMinInputValue] = React.useState(1)\r\n\r\n    const onMaxInputChange = () => {\r\n        setMaxInputValue(maxInputRef.current.value);\r\n    }\r\n    const onMinInputChange = () => {\r\n        setMinInputValue(minInputRef.current.value);\r\n    }\r\n    const setNums = (minInputValue, maxInputValue) => {\r\n        const numsArr = [minInputValue, maxInputValue]\r\n        dispatch(starterAC(numsArr))\r\n    }\r\n\r\n    return (\r\n        <div className=\"counter__block\">\r\n            <div className=\"counter__setter-block\">\r\n                <div className=\"counter__inputs\">\r\n                    <div className=\"counter__input\">\r\n                        <label htmlFor=\"maxInput\">max value:</label>\r\n                        <input ref={maxInputRef} onChange={onMaxInputChange} type=\"number\" name=\"maxInput\" value={maxInputValue}/>\r\n                    </div>\r\n                    <div className=\"counter__input\">\r\n                        <label htmlFor=\"minInput\">min value:</label>\r\n                        <input ref={minInputRef} onChange={onMinInputChange} type=\"number\" name=\"minInput\" value={minInputValue}/>\r\n                    </div>\r\n                </div>\r\n            </div>  \r\n            <div className=\"counter__setter-btn\">\r\n                <button onClick={() => setNums(minInputValue, maxInputValue)} className=\"btn btn--set\">Set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetterBlock\r\n","import React from 'react';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {starterAC, reseterAC, incrementAC, changeValuesAC} from './redux/actions/actions'\nimport OutputerBlock from './components/OutputerBlock';\nimport SetterBlock from './components/SetterBlock';\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    const maxInputRef = React.createRef();\n    const minInputRef = React.createRef();\n\n    const [maxInputValue, setMaxInputValue] = React.useState(10)\n    const [minInputValue, setMinInputValue] = React.useState(1)\n\n    const onMaxInputChange = () => {\n        setMaxInputValue(Number(maxInputRef.current.value));\n        dispatch(changeValuesAC());\n    }\n    const onMinInputChange = () => {\n        setMinInputValue(Number(minInputRef.current.value));\n        dispatch(changeValuesAC());\n    }\n    const setNums = (minInputValue, maxInputValue) => {\n        const numsArr = [minInputValue, maxInputValue]\n        dispatch(starterAC(numsArr))\n    }\n\n      // Outputer block\n\n    const {numsLoaded, minNum, maxNum, resetActivate} = useSelector(({countReducer}) => countReducer);\n\n    const onStartBtnClick = (minNum) => {\n        dispatch(incrementAC(minNum + 1))\n    }\n\n    const resetCounter = (minInputValue) => {\n        dispatch(reseterAC(minInputValue));\n    }\n  \n  return (\n      <div className=\"wrap\">\n        <div className=\"counter__block\">\n            <div className=\"counter__setter-block\">\n                <div className=\"counter__inputs\">\n                    <div className=\"counter__input\">\n                        <label htmlFor=\"maxInput\">max value:</label>\n                        <input className={ \n                  minInputValue >= maxInputValue \n                  || minInputValue < 0 \n                  || maxInputValue < 0\n                  ? 'error' : ''} ref={maxInputRef} onChange={onMaxInputChange} type=\"number\" name=\"maxInput\" value={maxInputValue}/>\n                    </div>\n                    <div className=\"counter__input\">\n                        <label htmlFor=\"minInput\">min value:</label>\n                        <input className={ \n                  minInputValue >= maxInputValue \n                  || minInputValue < 0 \n                  || maxInputValue < 0\n                  ? 'error' : ''} ref={minInputRef} onChange={onMinInputChange} type=\"number\" name=\"minInput\" value={minInputValue}/>\n                    </div>\n                </div>\n            </div>  \n            <div className=\"counter__setter-btn\">\n                <button onClick={() => setNums(minInputValue, maxInputValue)} \n                className=\"btn btn--set\"\n                disabled={numsLoaded \n                || minInputValue >= maxInputValue \n                || minInputValue < 0 \n                || maxInputValue < 0\n                ? true : false}>Set</button>\n            </div>\n        </div>\n        <div className=\"counter__block\">\n            <div className=\"counter__setter-block\">\n            <span className={`output ${minNum === maxNum && numsLoaded ? 'equals' : ''}`}>\n                {minInputValue >= maxInputValue \n                  || minInputValue < 0 \n                  || maxInputValue < 0\n                  ? <b className='error-text'>Incorrect values</b> \n                  : numsLoaded \n                  ? minNum \n                  : 'Enter values and press \"Set\"'}\n            </span>\n            </div>  \n            <div className=\"counter__setter-btn\">\n                <button onClick={() => onStartBtnClick(minNum)} \n                  className=\"btn btn--set\" \n                  disabled={minNum === maxNum || !numsLoaded ? true : false}>Start</button>\n                <button onClick={() => resetCounter(minInputValue)} \n                  className=\"btn btn--set\" \n                  disabled={resetActivate}>Reset</button>\n            </div>\n        </div>\n    </div>\n  )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    numsLoaded: false,\r\n    minNum: 0,\r\n    maxNum: 0,\r\n    resetActivate: true\r\n}\r\n\r\nconst countReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'SET_COUNT':\r\n            return {\r\n                ...state,\r\n                minNum: action.payload[0],\r\n                maxNum: action.payload[1],\r\n                numsLoaded: true\r\n            }\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state,\r\n                minNum: action.payload,\r\n                resetActivate: false\r\n            }\r\n        case 'RESET_COUNTER':\r\n            return {\r\n                ...state,\r\n                minNum: action.payload,\r\n                resetActivate: true\r\n            }\r\n        case 'CHANGE_VALUES':\r\n            return {\r\n                ...state,\r\n                numsLoaded: false\r\n            }\r\n            \r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default countReducer;","import { createStore, combineReducers } from 'redux';\r\nimport countReducer from './reducers/count-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    countReducer\r\n})\r\n\r\nconst store = createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}